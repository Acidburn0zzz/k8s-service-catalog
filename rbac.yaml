# Source: catalog/templates/rbac.yaml
apiVersion: v1
kind: List
items:

# Cluster-wide permissions to read namespaces
- apiVersion: rbac.authorization.k8s.io/v1beta1
  kind: ClusterRole
  metadata:
    name: "namespace-reader"
  rules:
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs:     ["get", "list", "watch"]
  
### API Server ###
  
# Give APIServer the namespace reader permissions
- apiVersion: rbac.authorization.k8s.io/v1beta1
  kind: ClusterRoleBinding
  metadata:
    name: "servicecatalog.k8s.io:apiserver-namespace-reader"
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: "namespace-reader"
  subjects:
  - apiGroup: ""
    kind: ServiceAccount
    name: "apiserver"
    namespace: "service-catalog"
# apiserver gets the auth-delegator role to delegate auth decisions to
# the core apiserver
- apiVersion: rbac.authorization.k8s.io/v1beta1
  kind: ClusterRoleBinding
  metadata:
    name: "servicecatalog.k8s.io:apiserver-auth-delegator"
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:auth-delegator
  subjects:
  - apiGroup: ""
    kind: ServiceAccount
    name: "apiserver"
    namespace: "service-catalog"
# apiserver gets the ability to read authentication. This allows it to
# read the specific configmap that has the requestheader-* entries to
# enable api aggregation
- apiVersion: rbac.authorization.k8s.io/v1beta1
  kind: RoleBinding
  metadata:
    name: "servicecatalog.k8s.io:apiserver-authentication-reader"
    namespace: kube-system
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: Role
    name: extension-apiserver-authentication-reader
  subjects:
  - apiGroup: ""
    kind: ServiceAccount
    name: "apiserver"
    namespace: "service-catalog"

### Controller-Manager ###

# Give Controller-Manager the namespace reader permissions
- apiVersion: rbac.authorization.k8s.io/v1beta1
  kind: ClusterRoleBinding
  metadata:
    name: "servicecatalog.k8s.io:controller-manager-namespace-reader"
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: "namespace-reader"
  subjects:
  - apiGroup: ""
    kind: ServiceAccount
    name: "controller-manager"
    namespace: "service-catalog"

# controller-manager role defines what access the service-catalog
# controller-manager needs to manage the resources of the
# service-catalog
- apiVersion: rbac.authorization.k8s.io/v1beta1
  kind: ClusterRole
  metadata:
    name: "servicecatalog.k8s.io:controller-manager-clusterrole"
  rules:
    # brokers and serviceclasses are non-namespaced resources.
    # They should stay in cluster role
  - apiGroups: ["servicecatalog.k8s.io"]
    resources: ["brokers"]
    verbs:     ["get","list","watch"]
  - apiGroups: ["servicecatalog.k8s.io"]
    resources: ["serviceclasses"]
    verbs:     ["*"]
  - apiGroups: ["servicecatalog.k8s.io"]
    resources: ["brokers/status"]
    verbs:     ["update"]
    # At this time, list|watch bindings|instances are cluster-wide operation.
  - apiGroups: ["servicecatalog.k8s.io"]
    resources: ["bindings","instances"]
    verbs:     ["list","watch"]
    # It should be OK to cluster-wide permission for events.
  - apiGroups: [""]
    resources: ["events"]
    verbs:     ["create","patch","update"]
- apiVersion: rbac.authorization.k8s.io/v1beta1
  kind: ClusterRoleBinding
  metadata:
    name: "servicecatalog.k8s.io:controller-manager-clusterrolebinding"
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: "servicecatalog.k8s.io:controller-manager-clusterrole"
  subjects:
  - apiGroup: ""
    kind: ServiceAccount
    name: "controller-manager"
    namespace: "service-catalog"

- apiVersion: rbac.authorization.k8s.io/v1beta1
  kind: Role
  metadata:
    name: "servicecatalog.k8s.io:controller-manager-role"
    namespace: default
  rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs:     ["get"]
- apiVersion: rbac.authorization.k8s.io/v1beta1
  kind: RoleBinding
  metadata:
    name: "servicecatalog.k8s.io:controller-manager-rolebinding"
    namespace: default
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: Role
    name: "servicecatalog.k8s.io:controller-manager-role"
  subjects:
  - apiGroup: ""
    kind: ServiceAccount
    name: "controller-manager"
    namespace: "service-catalog"

# This gives create/update access to an endpoint in kube-system for leader election
# TODO: use an object other than endpoints, and in the same namespace as the service catalog, not in kube-system
- apiVersion: rbac.authorization.k8s.io/v1beta1
  kind: Role
  metadata:
    name: "servicecatalog.k8s.io::leader-locking-controller-manager"
    namespace: kube-system
  rules:
  - apiGroups: [""]
    resources: ["endpoints"]
    verbs:     ["create"]
  - apiGroups:     [""]
    resources:     ["endpoints"]
    resourceNames: ["service-catalog-controller-manager"]
    verbs:         ["get","update"]
- apiVersion: rbac.authorization.k8s.io/v1beta1
  kind: RoleBinding
  metadata:
    name: service-catalog-controller-manager
    namespace: kube-system
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: Role
    name: "servicecatalog.k8s.io::leader-locking-controller-manager"
  subjects:
  - apiGroup: ""
    kind: ServiceAccount
    name: "controller-manager"
    namespace: "service-catalog"
